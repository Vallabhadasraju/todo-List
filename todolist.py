# -*- coding: utf-8 -*-
"""todolist

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/179zZwq2FzXs9AVpzcRnmXgH4mYDe-1Pe
"""

# In the second cell
import gradio as gr

# --- Application State ---
# In Gradio, we manage the list of tasks in a simple list variable.
# We add a tuple (task_text, is_completed) to this list.
tasks = []

# --- Core Functions ---

def add_task(current_tasks, new_task_text):
    """
    Adds a new task to the list.
    Args:
        current_tasks (list): The current list of tasks.
        new_task_text (str): The text for the new task.
    Returns:
        tuple: Updated task list, an empty string for the textbox, and updated checkbox group.
    """
    if new_task_text:
        current_tasks.append((new_task_text, False)) # Add as a tuple (text, completed_status)

    # We need to return an update for each UI component that changes
    return current_tasks, "", gr.update(choices=[task for task, completed in current_tasks],
                                        value=[task for task, completed in current_tasks if completed])

def update_tasks(current_tasks, completed_task_texts):
    """
    Updates the completed status of tasks based on checkbox selections.
    Args:
        current_tasks (list): The current list of tasks.
        completed_task_texts (list): The list of texts from the checked boxes.
    Returns:
        list: The updated list of tasks.
    """
    updated_tasks = []
    for task_text, _ in current_tasks:
        is_completed = task_text in completed_task_texts
        updated_tasks.append((task_text, is_completed))
    return updated_tasks

def delete_completed_tasks(current_tasks):
    """
    Deletes all tasks that are marked as completed.
    Returns:
        tuple: The filtered list of tasks and an updated checkbox group.
    """
    # Keep only the tasks that are NOT completed
    remaining_tasks = [(task, completed) for task, completed in current_tasks if not completed]

    # Update the UI components
    return remaining_tasks, gr.update(choices=[task for task, completed in remaining_tasks], value=[])


# --- Gradio UI Layout ---

with gr.Blocks(css="""#del_btn {background-color: #f44336; color: white;}""", theme=gr.themes.Soft()) as app:

    # Using a State variable to hold our list of tasks
    task_state = gr.State(tasks)

    gr.Markdown("# âœ… Modern To-Do List")
    gr.Markdown("Add, manage, and complete your tasks.")

    with gr.Row():
        # Textbox for new task input
        task_input = gr.Textbox(
            label="New Task",
            placeholder="What do you need to do?",
            scale=4 # Make it wider than the button
        )
        # Button to add a new task
        add_button = gr.Button("Add Task", variant="primary", scale=1)

    gr.Markdown("---")
    gr.Markdown("### Your Tasks")

    # CheckboxGroup to display the list of tasks
    task_list_display = gr.CheckboxGroup(
        label="Tasks",
        choices=[]
    )

    # Button to clear completed tasks
    delete_button = gr.Button("Delete Completed Tasks", elem_id="del_btn")

    # --- Event Handlers (Connecting UI to Functions) ---

    # When the "Add Task" button is clicked:
    add_button.click(
        fn=add_task,
        inputs=[task_state, task_input],
        outputs=[task_state, task_input, task_list_display]
    )

    # Also allow adding a task by pressing Enter in the textbox
    task_input.submit(
        fn=add_task,
        inputs=[task_state, task_input],
        outputs=[task_state, task_input, task_list_display]
    )

    # When a checkbox is checked or unchecked:
    task_list_display.change(
        fn=update_tasks,
        inputs=[task_state, task_list_display],
        outputs=[task_state]
    )

    # When the "Delete" button is clicked:
    delete_button.click(
        fn=delete_completed_tasks,
        inputs=[task_state],
        outputs=[task_state, task_list_display]
    )

# Launch the app
app.launch(debug=True)